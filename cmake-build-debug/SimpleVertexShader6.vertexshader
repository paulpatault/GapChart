#version 330 core

//Entrees
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexColor_modelspace;
layout(location = 2) in vec2 vertexTexcoord_modelspace;

// Sortie
smooth out vec3 colort;
smooth out float depth;
smooth out vec2 UV;

// Params
uniform mat4 modelMatrix;
uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;

void main(){
  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(vertexPosition_modelspace, 1.0);
  depth  = gl_Position.z;
  colort = vertexColor_modelspace;
  // on fait juste passer les coordonnes UV du vertex au fragment shader car ca fera l'interpolation pour chaque fragment
  UV     = vertexTexcoord_modelspace;
}